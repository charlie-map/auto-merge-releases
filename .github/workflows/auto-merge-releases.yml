name: Auto-Merge Releases

on:
  push:
    branches:
      - release**

jobs:
  auto-merge:
    name: Auto-merge
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git account
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract branch name
        id: branch_name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Merge branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default GitHub token
        run: |
          filename="releases.txt"

          if [ -e "$filename" ]; then
              rm "$filename"
          fi

          git checkout ${{ github.event.repository.default_branch }}
          for remotebranch in `git branch -r | grep release | grep -v ${{ steps.branch_name.outputs.branch }}`; do git branch --track ${remotebranch#origin/} $remotebranch; done
          git branch --list "release*" >> "$filename"

          git config pull.rebase false

          # Loop through each line of the file
          prev_branch=${{ steps.branch_name.outputs.branch }}
          while IFS= read -r line || [[ -n "$line" ]]; do
              # Process each line here
              line="${line:2}"
              echo "Processing line: $line"

              if [ "$line" == "${{ steps.branch_name.outputs.branch }}" ]; then
                continue
              elif [[ "$line" < "${{ steps.branch_name.outputs.branch }}" ]]; then
                continue
              fi

              git checkout $line
              echo "Pulling change from $prev_branch into $line"
              git pull

              if git merge --no-ff --allow-unrelated-histories origin/"$prev_branch" -m "Automated merge from $prev_branch"; then
                echo "Merge successful"
                git push origin $line
              else
                echo "Failed to merge. Creating PR and stopping run"
                echo "head=$line" >> $GITHUB_OUTPUT
                echo "origin=$prev_branch" >> $GITHUB_OUTPUT

                break
              fi

              prev_branch=$line
          done < "$filename"

          rm "$filename"
